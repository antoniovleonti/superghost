<html>

<head>
<title>Superghost test</title>
</head>

<body>

<header>
<h1>superghost</h1>
</header>

<h2>Actions</h2>

<div id="updateDiv">
Update word
<form method="POST" action="/word" id="affixForm">
  <fieldset id="affixFieldSet" disabled=true>
    <input type="text" name="prefix" maxlength="1" size="1">
    <span id="word"></span>
    <input type="text" name="suffix" maxlength="1" size="1">
    <input type="submit" value="submit">
  </fieldset>
</form>
</div>

<div id="challengeDiv">
Challenge
<form method="POST" action="/challenge-is-word">
	<fieldset id="challengeFieldSet" disabled=true>
		<button type="button" id="isWordButton">this is a word</button>
		<button type="button" id="noContinuationButton">there's no continuation</button>
	</fieldset>
</form>
</div>

<div id="rebutDiv">
Rebut challenge
<form method="POST" action="/rebuttal" id="rebutForm">
  <fieldset id=rebutFieldSet disabled>
    <input type="text" name="continuation">
    <input type="submit" value="submit">
  </fieldset>
</form>
</div>

<h2>Players:</h2>
<ol id="playerList">
</ol>

</body>

<script>

const myUsername = "{{.Username}}"

const affixForm = document.getElementById("affixForm")
const rebutForm = document.getElementById("rebutForm")

const affixFieldSet = document.getElementById("affixFieldSet")
const challengeFieldSet = document.getElementById("challengeFieldSet")
const rebutFieldSet = document.getElementById("rebutFieldSet")

affixForm.addEventListener("submit", function(e){
  e.preventDefault() // do not redirect
  var xhr = new XMLHttpRequest()
	xhr.onload = function() {
		if (xhr.status != 200) {
			console.log(xhr.responseText)
			return // I should probably do something useful here
		}
		affixForm.reset()
	}
  xhr.open("POST", "/word")
  xhr.send(new URLSearchParams(new FormData(affixForm)))
})

rebutForm.addEventListener("submit", function(e){
  e.preventDefault() // do not redirect
  var xhr = new XMLHttpRequest()
	xhr.onload = function() {
		if (xhr.status != 200) {
			console.log(xhr.responseText)
			return // I should probably do something useful here
		}
		rebutForm.reset()
	}
  xhr.open("POST", "/rebuttal")
  xhr.send(new URLSearchParams(new FormData(rebutForm)))
})

isWordButton.addEventListener("click", function(e){
  e.preventDefault() // do not redirect
  var xhr = new XMLHttpRequest()
	xhr.onload = function() {
		if (xhr.status != 200) {
			console.log(xhr.responseText)
			return // I should probably do something useful here
		}
	}
  xhr.open("POST", "/challenge-is-word")
  xhr.send()
})

noContinuationButton.addEventListener("click", function(e){
  e.preventDefault() // do not redirect
  var xhr = new XMLHttpRequest()
	xhr.onload = function() {
		if (xhr.status != 200) {
			return // I should probably do something useful here
		}
	}
  xhr.open("POST", "/challenge-continuation")
  xhr.send()
})

function longPollNextGameState () {
  var xhr = new XMLHttpRequest()
  xhr.onload = function () {
    var state = JSON.parse(xhr.responseText)
    console.log(xhr.responseText)
    renderEverything(state)
    longPollNextGameState()
  }
  xhr.open("GET", "/next-state")
  xhr.send()
}

function getCurrentGameState () {
  var xhr = new XMLHttpRequest()
  xhr.onload = function () {
    var state = JSON.parse(xhr.responseText)
    console.log(xhr.responseText)
    renderEverything(state)
  }
  xhr.open("GET", "/state")
  xhr.send()
}

// TODO: clean this up
function renderEverything(gameState) {
  renderPlayers(gameState.players, gameState.nextPlayer)
  renderWord(gameState.word)
  if (gameState.players[gameState.nextPlayer].username == myUsername) {
    switch (gameState.phase) {
      case "kEdit":
        enterEditMode()
        break;
      case "kRebut":
        enterRebuttalMode()
        break
      case "kInsufficientPlayers":
        enterReadonlyMode()
        break
    }
  } else {
    enterReadonlyMode()
  }
}

function renderPlayers(players, nextPlayer) {
	let youEmoji = String.fromCodePoint(0x1FAF5)
	let activeEmoji = String.fromCodePoint(0x1F58B)
  playerList = document.getElementById("playerList")
  console.log(nextPlayer)
  playerList.innerHTML = "" // clear
  for (let i = 0; i < players.length; i++) {
    var node = document.createElement("li")
    var playerStr = players[i].username + " "
        + players[i].score
        + ((players[i].username == myUsername) ? youEmoji : "")
        + ((i == nextPlayer) ? activeEmoji : "" )
    node.appendChild(document.createTextNode(playerStr))
    playerList.appendChild(node)
  }
}

function enterEditMode() {
  // enable editor
  affixFieldSet.disabled=false
  challengeFieldSet.disabled=false
  rebutFieldSet.disabled=true
}

function enterReadonlyMode() {
  affixFieldSet.disabled=true
  challengeFieldSet.disabled=true
  rebutFieldSet.disabled=true
}

function enterRebuttalMode() {
  affixFieldSet.disabled=true
  challengeFieldSet.disabled=true
  rebutFieldSet.disabled=false
}

function renderWord(word) {
  document.getElementById("word").innerHTML = word
}

getCurrentGameState()
longPollNextGameState()

</script>

</html>
